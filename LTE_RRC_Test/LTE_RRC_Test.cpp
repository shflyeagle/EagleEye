// LTE_RRC_Test.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>

#include "lterrc/LteRrcMessage.h"

int _tmain(int argc, _TCHAR* argv[])
{
	{
		const char rrc_001_ULCCH_rrcconnectreq[] = { 0x40, 0x1c, 0x0b, 0x26, 0x6e, 0x68 };
		LteRrcMessage msg;
		int rc = msg.decode("UL-CCCH-Message", rrc_001_ULCCH_rrcconnectreq, 6);
		if (0 == rc)
		{
			std::cout << "rrc xml info: " << std::endl;
			std::cout << msg.decoded_msg << std::endl;
		}
	}

	{
		const char rrc_002_DLCCH_rrcconnectsetup[] = 
		  { 0x70, 0x12, 0x98, 0x27, 0xfd, 0xce, 0x01, 0x83, 0x81, 0xb9, 
			0x80, 0x7c, 0x00, 0x18, 0x06, 0x01, 0xff, 0xab, 0x4d, 0x0d, 
			0x61, 0xff, 0xf8, 0xc3, 0xff, 0xbb, 0x0f, 0x67, 0x02, 0x81, 
			0x59, 0x42, 0x40, 0x11, 0xaf, 0x54, 0x34, 0x10, 0x8b, 0xB0};

		LteRrcMessage msg;
		int rc = msg.decode("DL-CCCH-Message", rrc_002_DLCCH_rrcconnectsetup, 40);
		if (0 == rc)
		{
			std::cout << "rrc xml info: " << std::endl;
			std::cout << msg.decoded_msg << std::endl;
		}
	}

	{
		const char rrc_003_DLDCCH_rrcrecfg[] = 
		  { 0x22, 0x12, 0x15, 0xa8, 0x00, 0x00, 0x4e, 0x7d, 0x52, 0x00, 
		    0x02, 0x80, 0x26, 0x50, 0xb0, 0x00, 0x00, 0x46, 0x63, 0x61, 
			0x80, 0x76, 0x8d, 0x4e, 0x13, 0xfe, 0xe7, 0x00, 0xc5, 0xc0, 
			0x0f, 0xa8, 0x1b, 0x43, 0x47, 0xd9, 0x21, 0x07, 0x22, 0x23, 
			0x68, 0x01, 0x3b, 0xac, 0x85, 0xbb, 0x48, 0x55, 0xac, 0x3e, 
			0xce, 0x05, 0x02, 0xb2, 0x85, 0xbc, 0x80, 0x8b, 0xed };

		LteRrcMessage msg;
		int rc = msg.decode("DL-DCCH-Message", rrc_003_DLDCCH_rrcrecfg, 59);
		if (0 == rc)
		{
			std::cout << "rrc xml info: " << std::endl;
			std::cout << msg.decoded_msg << std::endl;
		}
	}

	{
		const char rrc_004_BCCH_DL_SCH_BR1[] =
		{ 0x68,0x4C,0x46,0x90,0x11,0x00,0x70,0x41,0x14,0x03,
		  0x92,0x0E,0xA6,0x09,0x81,0x84,0x0C,0x2B,0xBE,0x69,
		  0x2F,0x7F,0x41,0xF2,0xE1,0x02,0x80,0x00,0x7F,0xBF,
		  0x7D,0xFF,0xFF,0xE8,0x95,0x00,0x00,0x00,0x00,0x00,
		  0x00,0x00,0x00,0x00 };

		LteRrcMessage msg;
		int rc = msg.decode("BCCH-DL-SCH-Message-BR", rrc_004_BCCH_DL_SCH_BR1, 44);
		if (0 == rc)
		{
			std::cout << "rrc xml info: " << std::endl;
			std::cout << msg.decoded_msg << std::endl;
		}
	}

	{
		const char rrc_005_BCCH_DL_SCH_SIB14[] =
		{ 0x00, 0x41, 0x01, 0x21, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00,
		  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

		LteRrcMessage msg;
		int rc = msg.decode("BCCH-DL-SCH-Message-BR", rrc_005_BCCH_DL_SCH_SIB14, 20);
		if (0 == rc)
		{
			std::cout << "rrc xml info: " << std::endl;
			std::cout << msg.decoded_msg << std::endl;
		}
	}

	{
		const char rrc_006_PCCH_Message[] =
		{ 0x08,0x80,0x00,0x00,0x00,0x00,0x00,0x00 };

		LteRrcMessage msg;
		int rc = msg.decode("PCCH_Message", rrc_006_PCCH_Message, 8);
		if (0 == rc)
		{
			std::cout << "rrc xml info: " << std::endl;
			std::cout << msg.decoded_msg << std::endl;
		}
	}

	system("pause");

	return 0;
}

